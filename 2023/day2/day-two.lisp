(ql:quickload "uiop")

(defun get-valid-games ()
    (with-open-file (stream "input")
      (let ((red-limit 12)
            (green-limit 13)
            (blue-limit 14)
            (legal-game-sum 0)
            (power 0)
            (game-id 1))
      (loop for line = (read-line stream nil)
            while line
            do (progn (print line)
                (multiple-value-bind (red-count green-count blue-count) (get-cubes line)
                    (if (legal-game red-limit green-limit blue-limit red-count green-count blue-count)
                        (progn (format t "Legal game~C" #\Newline) (incf legal-game-sum game-id))
                     )
                    (incf power (* red-count green-count blue-count))
                    (format t "R: ~d G: ~d B: ~d~Cpower is ~d~C" red-count green-count blue-count #\Newline (* red-count green-count blue-count) #\Newline)
                    (incf game-id 1)
                    (format t "power is now ~a" power)
      )))
      (values legal-game-sum power)
     )
  )
)

(defun legal-game (red-limit green-limit blue-limit red green blue)
  (and
             (<= red red-limit)
             (<= green green-limit)
             (<= blue blue-limit)
  )
)

(defun get-cubes (line)
    (let* ((hashmap (make-hash-table))
           (max-red 0)
           (max-green 0)
           (max-blue 0)
           (trimmed-str (string-trim '(#\space) line))
           (draws (mapcar #'(lambda (str)
                                (mapcar #'(lambda (s) (string-trim '(#\space) s))
                                        (uiop:split-string
                                              str :separator ";"))
                                )
                          (cdr (uiop:split-string trimmed-str :separator ":"))
            )))
            ; (print draws)
            ; (format t "game ~a~Clength ~d~C" (car draws) #\Newline (length (car draws)) #\Newline)
            (mapcar #'(lambda (draw-set)
                    (let* ((cubes (uiop:split-string draw-set :separator ","))
                           (red-count 0)
                           (green-count 0)
                           (blue-count 0))
                      (mapcar #'(lambda (lst)
                                  (let* ((parts
                                            (uiop:split-string (string-trim '(#\Space) lst) :separator " "))
                                         (color (nth 1 parts))
                                         (count (parse-integer (car parts))))
                                    (if (string= color "green")
                                        (incf green-count count)
                                        (if (string= color "red")
                                            (incf red-count count)
                                            (if (string= color "blue")
                                                (incf blue-count count)
                                            )
                                      )
                                    )
                                )
                            ) cubes)
                      (if (> red-count max-red) (setf max-red red-count))
                      (if (> green-count max-green) (setf max-green green-count))
                      (if (> blue-count max-blue) (setf max-blue blue-count))
                    )) (car draws))
        (values max-red max-green max-blue)
     )
)
